from telebot.types import Message
from datetime import datetime

from diploma.states.states import MyStates
from diploma.config_data.config import HOST_API
from diploma.api.util.api_collections import KinoPoiskAPI, api_key
from diploma.database.common.models import db, User, MovieSearchHistory
from diploma.database.util.CRUD import save_search_history

from diploma.keyboards.inline.buttons import movie_buttons

url = HOST_API
api = KinoPoiskAPI(api_key=api_key)

def register_handlers(bot):

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    @bot.message_handler(commands=['history'])
    def show_history(message: Message):
        print("üìú –í—ã–∑–≤–∞–Ω —Ö–µ–Ω–¥–ª–µ—Ä history")
        user_id = message.from_user.id
        history = MovieSearchHistory.select().where(MovieSearchHistory.user_id == user_id)

        if history.exists():
            history_text = "\n".join([f"{h.task_id}. {h.movie_title} ‚Äî {h.result}" for h in history])
            bot.reply_to(message, f"–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:\n{history_text}")
        else:
            bot.reply_to(message, "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")


    @bot.message_handler(commands=['search'])
    def search(message: Message):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        bot.register_next_step_handler(message, movie_search)
        bot.set_state(message.from_user.id, MyStates.search, message.chat.id)
        with bot.retrieve_data(message.from_user.id) as data:
            data["new_task"] = {"user_id": message.from_user.id}


    # @bot.message_handler(state=MyStates.search, func=lambda message: True)
    def movie_search(message: Message):

        title = message.text.strip()
        if not title:
            bot.reply_to(message, "–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞.")
            bot.register_next_step_handler(message, movie_search)
            return

        result = api.search_movie(title)

        if "error" in result:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞: {result['message']}")
        else:
            films = result.get("docs", [])
            if not films:
                bot.reply_to(message, "–§–∏–ª—å–º–æ–≤ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            else:
                response_text = "\n".join(
                    [f"{film['name']} ({film['year']}) - –†–µ–π—Ç–∏–Ω–≥: {film['rating']['kp']}" for film in films]
                )
                save_search_history(user_id=message.from_user.id, movie_title=title, result=response_text)
                bot.reply_to(message, response_text)

        bot.delete_state(message.from_user.id, message.chat.id)

    @bot.message_handler(commands=['movies_rating'])
    def movies_rating(message: Message):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤:")
        bot.register_next_step_handler(message, movie_by_rating)
        bot.set_state(message.from_user.id, MyStates.movies_rating, message.chat.id)
        print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {bot.get_state(message.from_user.id, message.chat.id)}")

    # @bot.message_handler(state=MyStates.movies_rating, func=lambda message: True)
    def movie_by_rating(message: Message):

        title = message.text.strip()

        try:
            result = api.get_movies_by_rating(int(title))

            if "error" in result:
                bot.reply_to(message, f"–û—à–∏–±–∫–∞: {result['message']}")
            else:
                films = result.get("docs", [])
                if not films:
                    bot.reply_to(message, "–§–∏–ª—å–º–æ–≤ —Å —Ç–∞–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                else:
                    response_text = "–§–∏–ª—å–º—ã –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:\n" + "\n".join(
                        [f"{film['name']} ({film['year']}) - –†–µ–π—Ç–∏–Ω–≥: {film['rating']['kp']}" for film in films]
                    )
                    save_search_history(user_id=message.from_user.id, movie_title=title, result=response_text)
                    bot.send_message(message.chat.id, response_text)

        except ValueError:
            bot.reply_to(message, "–†–µ–π—Ç–∏–Ω–≥ - —ç—Ç–æ —á–∏—Å–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
            bot.register_next_step_handler(message, movie_by_rating)

        bot.delete_state(message.from_user.id, message.chat.id)


    @bot.message_handler(commands='person_name')
    def person_name(message: Message):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–∫—Ç–µ—Ä–∞:")
        bot.register_next_step_handler(message, person_by_name)
        bot.set_state(message.from_user.id, MyStates.person_name, message.chat.id)


    # @bot.message_handler(state=MyStates.person_name, func=lambda message: True)
    def person_by_name(message: Message):

        title = message.text.strip()
        if not title:
            bot.reply_to(message, "–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏.–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∏–º—è –∞–∫—Ç–µ—Ä–∞.")
            bot.register_next_step_handler(message, person_by_name)
            return

        result = api.get_person_by_name(title)

        if "error" in result:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞: {result['message']}")
        else:
            data = result.get("docs", [])
            if not data:
                bot.reply_to(message, "–ê–∫—Ç–µ—Ä–æ–≤ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            else:
                response_text = "\n".join(
                    [f"{d['name']} - –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {datetime.fromisoformat(d['birthday'][:-1]).strftime('%d.%m.%Y')}, "
                     f"–≤–æ–∑—Ä–∞—Å—Ç - {d.get('age', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}, –ø–æ–ª - {d['sex']}" for d in data]
                )
                save_search_history(user_id=message.from_user.id, movie_title=title, result=response_text)
                bot.send_message(message.chat.id, response_text)

        bot.delete_state(message.from_user.id, message.chat.id)





# bot.polling(none_stop=True)
# print(api.movie_search("–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä"))